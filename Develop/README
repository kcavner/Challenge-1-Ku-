# HORISEON seo code refactor challenge

## Description

- Refactoring existing code without actually changing what it does is a large part of what web development teams do. New technology, refining drafts of code, or meeting new implemented standards are a few reasons why it is such a common problem. There is always work to be done on good applications. This is the reason why there are constant updates for apps and the reason for why its best to keep apps on auto-update. Hinging on this fact is the challenge, HORISEON landing page: code refactor.

- There were a few bumps along the way completeing this challenge. Knowing what semantic elements were appropriate in place of non-semantic elements. Keeping an orgainzed consistent framework with comments to aid in future maintenance on the code. Maintaining the function of the HTML framework in accordance to the changes to the elements and the consolidation of the css selectors and declarations.
- commenting out lines of code and having a live preview of the changes allowed me to get a grasp of what is and isnt allowed. I found that most appropriate semantic elements worked in replacement but i kept to some of the standard code when it was found that the consolidation under broader selectors broke the layout of the page. This was mostly encountered in the header element. There was little commonality between the header declarations. I did my best and reduced redundancy but in the end i left it to the comment structure to help guide the coder. The most evident and successful cases that i encountered under consolidation was different selectors with shared declarations under a shared parent element. Consolidating those was a matter of grouping the class and removing the repetitive declarations.

## Table of Contents (Optional)

If your README is long, add a table of contents to make it easy for users to find what they need.

- [Installation](#installation)
- [Usage](#usage)
- [Credits](#credits)
- [License](#license)

## Installation

What are the steps required to install your project? Provide a step-by-step description of how to get the development environment running.

## Usage

Provide instructions and examples for use. Include screenshots as needed.

To add a screenshot, create an `assets/images` folder in your repository and upload your screenshot to it. Then, using the relative filepath, add it to your README using the following syntax:

    ```md
    ![alt text](assets/images/screenshot.png)
    ```

## Credits

List your collaborators, if any, with links to their GitHub profiles.

If you used any third-party assets that require attribution, list the creators with links to their primary web presence in this section.

If you followed tutorials, include links to those here as well.

## License

The last section of a high-quality README file is the license. This lets other developers know what they can and cannot do with your project. If you need help choosing a license, refer to [https://choosealicense.com/](https://choosealicense.com/).

---

üèÜ The previous sections are the bare minimum, and your project will ultimately determine the content of this document. You might also want to consider adding the following sections.

## Badges

![badmath](https://img.shields.io/github/languages/top/lernantino/badmath)

Badges aren't necessary, per se, but they demonstrate street cred. Badges let other developers know that you know what you're doing. Check out the badges hosted by [shields.io](https://shields.io/). You may not understand what they all represent now, but you will in time.

## Features

If your project has a lot of features, list them here.

## How to Contribute

If you created an application or package and would like other developers to contribute it, you can include guidelines for how to do so. The [Contributor Covenant](https://www.contributor-covenant.org/) is an industry standard, but you can always write your own if you'd prefer.

## Tests

Go the extra mile and write tests for your application. Then provide examples on how to run them here.